#!/usr/bin/env python3

__Developer__ = 'Vaasudevan S'
__Version__ = {'Python':'3.5.3', 'GRASS':'7.2'}
__Name__ = 'PipeLayout.py'

# --------------------- Environment Variables for GRASS -----------------------
import os
import sys

gisdb = 'GRASS/'
os.environ['GISBASE'] = gisbase = "/usr/lib/grass72"
location = 'Chennai'
mapset = 'AU'
sys.path.append(os.path.join(gisbase, "etc", "python"))

import grass.script.setup as gsetup
rcfile = gsetup.init(gisbase, gisdb, location, mapset)

from grass.pygrass.modules.shortcuts import general as g
from grass.pygrass.modules.shortcuts import raster as r
from grass.pygrass.modules.shortcuts import vector as v
from grass.pygrass.modules import Module
#os.environ['GRASS_VERBOSE'] = '-1' #runs modules silently

#-------------------------------- Variables -----------------------------------
Join = os.path.join
O = ['overwrite']
Layers = ('Buildings', 'Roads', 'TankPoints') # Available Layers
Colors = ['red', 'green', 'orange', 'purple', 'yellow', 'blue', 'black']
dia = '1' # metres
#-------------------------------- Code ----------------------------------------


if __name__ == '__main__':

    g.remove(type='vector', pattern='*', flags=['f']) # Cleaning the Workspace

    # Importing the ShapeFiles to GRASS
    for lr in Layers:
        v.in_ogr(input=Join('Test1', lr), output=lr, key='id', flags=O)
    #v.in_ascii(input=Join('Test1', 'TankPoints.csv'),
               #output='TankPoints',
               #cat=1, x=4, y=5, skip=1, separator='comma',
               #columns='id int, name varchar(20), type varchar(10), lat double precision, lon double precision, pipe varchar(10), litre int',
               #flags=O)

    """
    Method-1:
    This method will connect all the TankPoints with the Nearest vector lines
    (Road in this case). Using v.net.salesman the network is closed and Creating
    a buffer for this output will be our Layout of TankPoints along the Road.

    v.net(input='Roads',
          points='TankPoints',
          output='JoinedRoads',
          operation='connect',
          threshold='500',
          flags=O)

    v.net_salesman(input='JoinedRoads',
                   output='Layout1',
                   center_cats='1-8',
                   flags=O)

    v.buffer(input='Layout1', output='Layout1_Buffer', distance=dia, flags=O)

    # Calculating Distance from Storage to all the Tank Points
    v.extract(input='TankPoints', output='Storage', where="name like 'Storage'")
    v.db_addcolumn(map='TankPoints', columns='distance double precision')
    v.distance('TankPoints',
               to='Storage',
               upload='dist',
               column='distance'
               )
    """

    """
    Method-2:
    This method will Join all the Tank Points using Triangulation method
    implemented in v.to.lines and the optimal distance is generated by using
    v.net.spawningtree. Creating a buffer for this route will give the pipe
    Layout for the given Pipe diameter.
    """
    v.to_lines(input='TankPoints', output='JoinedTankPoints', flags=O)
    v.net_spanningtree(input='JoinedTankPoints', output='Layout2', flags=O)
    v.buffer(input='Layout2', output='Layout2_Buffer', distance=dia, flags=O)

    # Prepare Map for the Layout
    v.db_addcolumn(map='Buildings', columns='color varchar(10)')
    v.db_addcolumn(map='TankPoints', columns='size double precision')
    for id,color in enumerate(Colors, start=1):
        whr = 'id like %s' % id
        v.db_update(map='Buildings', column='color', where=whr, value=color)
    v.db_update(map='TankPoints', column='size', value=10)
    v.db_update(map='TankPoints', column='size', value=20, where='id like 1')
    ps = Module('ps.map')
    ps(input=Join('Test1', '#ps_scripts', 'GenLayout.psmap'),
       output='PipeLayout.ps',
       flags=O)

    #Removing the GRASS Vectors
    #g.remove(type='vector', pattern='*', flags=['f'])

#EOF
